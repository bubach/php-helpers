<?xml version="1.0" encoding="utf-8"?>
<project title="API Documentation" version="2.6.1">
  <partials/>
  <file path="Num.php" generated-path="Num.html" hash="797553f52f86a433ce6b80c9174b4c5b" package="Default">
    <docblock line="0">
      <description>The file for the Num class</description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
      <tag name="author" line="0" description="Jack Clayton" link="mailto:clayjs0@gmail.com"/>
      <tag name="copyright" line="0" description="2014 Jack Clayton"/>
      <tag name="license" line="0" description="MIT License &lt;http://opensource.org/licenses/MIT&gt;"/>
    </docblock>
    <class final="false" abstract="false" namespace="Jstewmc\PhpHelpers" line="20" package="Default">
      <extends/>
      <name>Num</name>
      <full_name>\Jstewmc\PhpHelpers\Num</full_name>
      <docblock line="20">
        <description>The number (aka, "num") class</description>
        <long-description>Keep in mind, a number in PHP (and hereafter in this class documentation) is
considered to be a (float), (int), or numeric (string).</long-description>
        <tag name="since" line="20" description="0.1.0"/>
        <tag name="package" line="20" description="Default"/>
      </docblock>
      <constant namespace="Jstewmc\PhpHelpers" line="27" package="Default">
        <name>REGEX_NUMBER_COMMA</name>
        <full_name>\Jstewmc\PhpHelpers\Num::REGEX_NUMBER_COMMA</full_name>
        <value>'#^([1-9](?:\d*|(?:\d{0,2})(?:,\d{3})*)(?:\.\d*[0-9])?|0?\.\d*[0-9]|0)$#'</value>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="27" description="&lt;p&gt;regex for a comma-separated number (e.g., &quot;1,000&quot;)&lt;/p&gt;" type="\Jstewmc\PhpHelpers\the" variable="">
            <type>\Jstewmc\PhpHelpers\the</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="Jstewmc\PhpHelpers" line="32" package="Default">
        <name>REGEX_NUMBER_MIXED</name>
        <full_name>\Jstewmc\PhpHelpers\Num::REGEX_NUMBER_MIXED</full_name>
        <value>'#^((\d+)\s+)?(\d+)[/\\\](\d+)$#'</value>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
          <tag name="var" line="32" description="&lt;p&gt;regex for a mixed number (e.g., &quot;1 1/2&quot;)&lt;/p&gt;" type="\Jstewmc\PhpHelpers\the" variable="">
            <type>\Jstewmc\PhpHelpers\the</type>
          </tag>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="66" package="Default">
        <name>almostEqual</name>
        <full_name>\Jstewmc\PhpHelpers\Num::almostEqual()</full_name>
        <docblock line="66">
          <description>Returns true if float $a is almost equal to float $b</description>
          <long-description>Floating point numbers should never be compared for equivalence because of the
way they are stored internally. They have limited precision, and many numbers
numbers that are representable as floating point numbers in base 10 (e.g., 0.1
or 0.7) do not have an exact representation as floating point numbers in base 2.

To test floating point values for equality, an upper bound on the relative error
due to rounding is used. This value is known as the machine epsilon, and is the
largest acceptable difference in calculations (exclusive).</long-description>
          <tag name="since" line="66" description="0.1.0"/>
          <tag name="param" line="66" description="&lt;p&gt;the first value&lt;/p&gt;" type="integer|float" variable="$a">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;the second value&lt;/p&gt;" type="integer|float" variable="$b">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;the maximum allowed difference (exclusive) (optional;&#10;if omitted defaults to 0.00001)&lt;/p&gt;" type="integer|float" variable="$epsilon">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="return" line="66" description="true if the values are equal" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="66" description="if $a, $b, or $epsilon is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="66" description="if $a is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="66" description="if $b is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="66" description="if $epsilon is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="66" description="if $epsilon is not greater than zero" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="66" description="man page on float type" link="http://www.php.net/manual/en/language.types.float.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$a</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$b</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$epsilon</name>
          <default>1.0E-5</default>
          <type>integer|float</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="139" package="Default">
        <name>bound</name>
        <full_name>\Jstewmc\PhpHelpers\Num::bound()</full_name>
        <docblock line="139">
          <description>Bounds a value between an upper and/or lower bound (inclusive)</description>
          <long-description>I'll bound $number between a lower an upper bound; greater than or equal to a lower
bound; or, less than or equal to an upper bound.

For example:

    Num::bound(1, 0);         // returns 1
    Num::bound(0, 1);         // returns 1
    Num::bound(-1, null, 2);  // returns -1
    Num::bound(3, null, 2);   // returns 2
    Num::bound(2, 1, 3);      // returns 2
    Num::bound(4, 1, 3);      // returns 3</long-description>
          <tag name="since" line="139" description="0.1.0"/>
          <tag name="param" line="139" description="&lt;p&gt;the number to bound&lt;/p&gt;" type="integer|float" variable="$number">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="139" description="&lt;p&gt;the number's lower bound (inclusive)&lt;/p&gt;" type="integer|float" variable="$lower">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="139" description="&lt;p&gt;the number's upper bound (inclusive)&lt;/p&gt;" type="integer|float" variable="$upper">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="return" line="139" description="the bounded value or false" type="integer|float">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="throws" line="139" description="if $number and $lower and/or $upper are not passed" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="139" description="if $lower is passed and not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="139" description="if $upper is passed and not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="139" description="if $upper is not greater than or equal to $lower" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$lower</name>
          <default>null</default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$upper</name>
          <default>null</default>
          <type>integer|float</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="222" package="Default">
        <name>ceilTo</name>
        <full_name>\Jstewmc\PhpHelpers\Num::ceilTo()</full_name>
        <docblock line="222">
          <description>Returns $number ceiling-ed to the nearest $multiple</description>
          <long-description>For example:

    Num::ceilTo(5, 2);    // returns 6
    Num::ceilTo(15, 10);  // returns 20
    Num::ceilTo(25, 40);  // returns 40</long-description>
          <tag name="since" line="222" description="0.1.0"/>
          <tag name="param" line="222" description="&lt;p&gt;the number to ceil&lt;/p&gt;" type="integer|float" variable="$number">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="222" description="&lt;p&gt;the multiple to ceil to (optional; if omitted,&#10;defaults to 1 (aka, PHP's native ceil() function))&lt;/p&gt;" type="integer|float" variable="$multiple">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="return" line="222" description="the ceiling-ed number" type="integer|float">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="throws" line="222" description="" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="222" description="if $number or $multiple is null" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="222" description="if $number is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="222" description="if $multiple is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="222" description="if $multiple is not greater than zero" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="222" description="Daren Schwneke's answer to &quot;How to&#10;   round up a number to the nearest 10?&quot; on StackOverflow" link="http://stackoverflow.com/a/1619284"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$multiple</name>
          <default>1</default>
          <type>integer|float</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="287" package="Default">
        <name>floorTo</name>
        <full_name>\Jstewmc\PhpHelpers\Num::floorTo()</full_name>
        <docblock line="287">
          <description>Returns $number floor-ed to the nearest $multiple</description>
          <long-description>For example:

    Num::floorTo(19, 10);     // returns 10
    Num::floorTo(0.99, 0.5);  // returns 0.5
    Num::floorTo(101, 100);   // returns 100</long-description>
          <tag name="since" line="287" description="0.1.0"/>
          <tag name="param" line="287" description="&lt;p&gt;the number to floor&lt;/p&gt;" type="integer|float" variable="$number">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="287" description="&lt;p&gt;the multiple to floor to (optional; if omitted,&#10;defaults to 1 (aka, PHP's native floor() function))&lt;/p&gt;" type="integer|float" variable="$multiple">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="return" line="287" description="" type="integer|float">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="throws" line="287" description="if $number or $multiple is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="287" description="if $number is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="287" description="if $multiple is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="287" description="if $multiple is not greater than zero" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="287" description="Daren Schwneke's answer to &quot;How to&#10;   round up a number to the nearest 10?&quot; on StackOverflow" link="http://stackoverflow.com/a/1619284"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$multiple</name>
          <default>1</default>
          <type>integer|float</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="332" package="Default">
        <name>is_int</name>
        <full_name>\Jstewmc\PhpHelpers\Num::is_int()</full_name>
        <docblock line="332">
          <description>Alias for the isInt() method</description>
          <long-description></long-description>
          <tag name="since" line="332" description="0.1.0"/>
          <tag name="see" line="332" description="" link="\Jstewmc\PhpHelpers\Num::isInt()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="344" package="Default">
        <name>is_numeric</name>
        <full_name>\Jstewmc\PhpHelpers\Num::is_numeric()</full_name>
        <docblock line="344">
          <description>Alias for the isNumeric() method</description>
          <long-description></long-description>
          <tag name="since" line="344" description="0.1.0"/>
          <tag name="see" line="344" description="" link="\Jstewmc\PhpHelpers\Num::isNumeric()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="375" package="Default">
        <name>isId</name>
        <full_name>\Jstewmc\PhpHelpers\Num::isId()</full_name>
        <docblock line="375">
          <description>Returns true if $number is a valid database id (aka, unsigned int)</description>
          <long-description>A valid id is a positive, non-zero integer that's less than or equal to
the maximum value for the unsigned datatype.

For example:

    Num::isId('abc');            // returns false
    Num::isId(1.5);              // returns false
    Num::isId(123);              // returns true
    Num::isId(999999, 'small');  // returns false</long-description>
          <tag name="since" line="375" description="0.1.0"/>
          <tag name="param" line="375" description="&lt;p&gt;the number to test&lt;/p&gt;" type="integer|float" variable="$number">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="375" description="&lt;p&gt;the column datatype name (possible values are&#10;'tiny[int]', 'small[int]', 'medium[int]', 'int[eger]', and 'big[int]')&#10;(case-insensitive) (optional; if omitted, defaults to 'int')&lt;/p&gt;" type="string" variable="$datatype">
            <type>string</type>
          </tag>
          <tag name="return" line="375" description="true if the number is a valid database id" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="375" description="if $datatype is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="375" description="if $datatype is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="375" description="if $datatype is not an allowed value" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$datatype</name>
          <default>'int'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="460" package="Default">
        <name>isInt</name>
        <full_name>\Jstewmc\PhpHelpers\Num::isInt()</full_name>
        <docblock line="460">
          <description>Returns true if $number is an integer or integer string</description>
          <long-description>PHP's native is_int() functions returns false on strings like '23' or '1'.
I will evaluate those integer strings to true.

For example:

    is_int(1);        // returns true
    Num::isInt(1);    // returns true

    is_int('1');      // returns false
    Num::isInt('1');  // returns true</long-description>
          <tag name="since" line="460" description="0.1.0"/>
          <tag name="param" line="460" description="&lt;p&gt;the number to test&lt;/p&gt;" type="integer|float" variable="$number">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="return" line="460" description="true if $number is an integer or integer string" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>integer|float</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="496" package="Default">
        <name>isNumeric</name>
        <full_name>\Jstewmc\PhpHelpers\Num::isNumeric()</full_name>
        <docblock line="496">
          <description>Returns true if $number is an integer, decimal, fraction, or mixed
number</description>
          <long-description>PHP's native is_numeric() method will return false on fractions or
mixed numbers. I'll return true.

For example:

    is_numeric(2);             // returns true
    self::isNumeric(2);        // returns true

    is_numeric(1.5);           // returns true
    self::isNumeric(1.5);      // returns true

    is_numeric("1.5");         // returns true
    self::isNumeric("1.5");    // returns true

    is_numeric("1/2");         // returns false
    self::isNumeric("1/2");    // returns true

    is_numeric("1 1/2");       // returns false
    self::isNumeric("1 1/2");  // returns true</long-description>
          <tag name="since" line="496" description="0.1.0"/>
          <tag name="param" line="496" description="&lt;p&gt;the number to test&lt;/p&gt;" type="mixed" variable="$number">
            <type>mixed</type>
          </tag>
          <tag name="return" line="496" description="true if $number is a number" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="530" package="Default">
        <name>isZero</name>
        <full_name>\Jstewmc\PhpHelpers\Num::isZero()</full_name>
        <docblock line="530">
          <description>Returns true if the value is zero</description>
          <long-description>It can be a little tricky to evaluate a variable in PHP as zero. If you use
PHP's native empty function, it will consider 0, '0', 0.0, and '0.0' as empty.
However, it will also consider false, array(), '' as empty too. If you compare
a value to the possible values for zero in PHP over-and-over, it's a pain. I
make it easy.

For example:

    Num::isZero((int) 0);      // returns true
    Num::isZero((float) 0.0);  // returns true
    Num::isZero("0");          // returns true
    Num::isZero("0.0");        // returns true

I'm particularly useful when combined with PHP's empty() function.

    $a = ! empty(0);                    // evaluates to false
    $b = ! empty(0) || Num::isZero(0);  // evaluates to true</long-description>
          <tag name="since" line="530" description="0.1.0"/>
          <tag name="param" line="530" description="&lt;p&gt;the number to test&lt;/p&gt;" type="mixed" variable="$number">
            <type>mixed</type>
          </tag>
          <tag name="return" line="530" description="true if $number is zero" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="570" package="Default">
        <name>normalize</name>
        <full_name>\Jstewmc\PhpHelpers\Num::normalize()</full_name>
        <docblock line="570">
          <description>Returns a normalized value between 0 and 1 (inclusive)</description>
          <long-description>In statistics, it's often helpful to normalize (sometimes referred to as index)
values for comparison. For example, for a retailer to compare an item's revenue
against its quantity-in-stock, the values must be normalized (otherwise, revenue
will likely be in the thousands of dollars and quantity in stock will likely be
in the dozens).

If you divide every item's revenue by the maximum revenue of any item, you'll have
a normalized value between 1 and 0. If you do the same for quantity-in-stock, you
can compare the two values easily.

For example:

    Num::normalize(1, 100);    // returns 0.01
    Num::normalize(50, 100);   // returns 0.5
    Num::normalize(0, 100);    // returns 0
    Num::normalize(150, 100);  // returns 1</long-description>
          <tag name="since" line="570" description="0.1.0"/>
          <tag name="param" line="570" description="&lt;p&gt;the number to normalize&lt;/p&gt;" type="integer|float" variable="$number">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="570" description="&lt;p&gt;the maximum to divide into $value&lt;/p&gt;" type="integer|float" variable="$max">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="return" line="570" description="a number between 1 and 0 (inclusive)" type="integer|float">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="throws" line="570" description="if $number or $max are not passed" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="570" description="if $number is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="570" description="if $max is not a number" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="570" description="if $max is not greater than zero" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$max</name>
          <default></default>
          <type>integer|float</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="628" package="Default">
        <name>roundTo</name>
        <full_name>\Jstewmc\PhpHelpers\Num::roundTo()</full_name>
        <docblock line="628">
          <description>Rounds $number to the nearest $multiple</description>
          <long-description>For example:

    Num::roundTo(7, 2);  // returns 8
    Num::roundTo(7, 4);  // returns 8
    Num::roundTo(7, 8);  // returns 8</long-description>
          <tag name="since" line="628" description="0.1.0"/>
          <tag name="param" line="628" description="&lt;p&gt;the number to round&lt;/p&gt;" type="integer|float" variable="$number">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="param" line="628" description="&lt;p&gt;the multiple to round to (optional; if omitted,&#10;defaults to 1 (aka, PHP's native round() method))&lt;/p&gt;" type="integer|float" variable="$multiple">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="return" line="628" description="the rounded number" type="integer|float">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="see" line="628" description="Daren Schwneke's answer to &quot;How to&#10;   round up a number to the nearest 10?&quot; on StackOverflow" link="http://stackoverflow.com/a/1619284"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$number</name>
          <default></default>
          <type>integer|float</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$multiple</name>
          <default>1</default>
          <type>integer|float</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="731" package="Default">
        <name>val</name>
        <full_name>\Jstewmc\PhpHelpers\Num::val()</full_name>
        <docblock line="731">
          <description>Returns the numeric value of $var</description>
          <long-description>PHP does not natively support fractions, mixed numbers, or comma-separated
values, but I will. Woot!

I use the following rules:

    Bools
        Bools are returns as strictly typed integers.

    Integers
        Integers are returned as strictly typed integers.

    Floats
        Floats are returned as strictly typed floats.

    Strings
        Numeric strings are returned as their strictly typed equivalent (i.e.,
        an integer or float). Numeric strings with commas are returned as their
        strictly typed equivalents. Fractions and mixed numbers are returns as
        floats. All other strings return 0.

    Arrays
        Empty arrays return 0, and non-empty arrays return 1.

    Objects
        This method should not be used on objects. However, unlike the native
        PHP intval() or floatval() methods, I will not raise an error. I will
        always evaluate objects as 1.

For example:

    Num::bool(true);           // returns (int) 1
    Num::val(1);               // returns (int) 1
    Num::val('1');             // returns (int) 1
    Num::val(1.5);             // returns (float) 1.5
    Num::val('1.5');           // returns (float) 1.5
    Num::val('1 1/2');         // returns (float) 1.5
    Num::val('3/2');           // returns (float) 1.5
    Num::val('3\2');           // returns (float) 1.5
    Num::val('1000');          // returns (int) 1000
    Num::val('1,000');         // returns (int) 1000
    Num::val('1,000.5');       // returns (float) 1000.5
    Num::val('10000');         // returns (int) 10000
    Num::val('1,0,0');         // returns 0
    Num::val('abc');           // returns 0
    Num::val(array());         // returns 0
    Num::val(array('foo'));    // returns 1
    Num::val(new stdClass());  // returns 1</long-description>
          <tag name="since" line="731" description="0.1.0"/>
          <tag name="param" line="731" description="&lt;p&gt;the value to evaluate&lt;/p&gt;" type="mixed" variable="$var">
            <type>mixed</type>
          </tag>
          <tag name="return" line="731" description="the value's numeric equivalent" type="integer|float">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="see" line="731" description="Pascal MARTIN's answer to &quot;Convert&#10;   mixed fraction string to float in PHP&quot; on StackOverflow (edited to allow&#10;   back- or forward-slashes in fractions)" link="http://stackoverflow.com/a/5264255"/>
          <tag name="see" line="731" description="Justin Morgain's answer to &quot;Regular&#10;   expression to match numbers with or without commas and decimals in text&quot; on&#10;   StackOverflow (edited to allow leading and trailing zeros in comma-separated&#10;   numbers)" link="http://stackoverflow.com/a/5917250"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="Arr.php" generated-path="Arr.html" hash="d1e25834cdb58f637307943aa9cbbeb1" package="Default">
    <docblock line="0">
      <description>The file for the Arr class</description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
      <tag name="author" line="0" description="Jack Clayton" link="mailto:clayjs0@gmail.com"/>
      <tag name="copyright" line="0" description="2014 Jack Clayton"/>
      <tag name="license" line="0" description="MIT License &lt;http://opensource.org/licenses/MIT&gt;"/>
    </docblock>
    <class final="false" abstract="false" namespace="Jstewmc\PhpHelpers" line="17" package="Default">
      <extends/>
      <name>Arr</name>
      <full_name>\Jstewmc\PhpHelpers\Arr</full_name>
      <docblock line="17">
        <description>The array (aka, "arr") class</description>
        <long-description></long-description>
        <tag name="since" line="17" description="0.1.0"/>
        <tag name="package" line="17" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="49" package="Default">
        <name>filterBykey</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::filterBykey()</full_name>
        <docblock line="49">
          <description>Filters an array by key</description>
          <long-description>&lt;p&gt;I'll iterate over each key in $array passing it to the $callback function.
If the callback function returns true, the current value from $array is added
to the result array. Array keys are preserved.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

```
    $a = ['foo', 'bar', 'baz'];
    Arr::filterByKey($a, function ($k) {
        return $k &gt; 1;
    });  // returns ['baz']
```</long-description>
          <tag name="since" line="49" description="0.1.0"/>
          <tag name="param" line="49" description="&lt;p&gt;the array to filter&lt;/p&gt;" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="param" line="49" description="&lt;p&gt;the function to call for each key in $array&lt;/p&gt;" type="callback" variable="$callback">
            <type>callback</type>
          </tag>
          <tag name="return" line="49" description="the filtered array" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="49" description="if $array or $callback is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="49" description="if $array is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="49" description="if $callback is not a callable function" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="49" description="Acid24's filter&#10;   by key function on on array_filter() man page" link="http://php.net/manual/en/function.array-filter.php#99073"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$callback</name>
          <default></default>
          <type>callback</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="107" package="Default">
        <name>filterByKeyPrefix</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::filterByKeyPrefix()</full_name>
        <docblock line="107">
          <description>Filters an array by a key prefix</description>
          <long-description>I'll iterate over each key in $array. If the key starts with $prefix, I'll
add it to the result array. Array keys are preserved.

For example:
    $a = ['foo' =&gt; 'bar', 'baz' =&gt; 'qux'];
    Arr::filterByKeyPrefix($a, 'b');  // returns ['baz']</long-description>
          <tag name="since" line="107" description="0.1.0"/>
          <tag name="param" line="107" description="&lt;p&gt;the array to filter&lt;/p&gt;" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="param" line="107" description="&lt;p&gt;the key's prefix to filter&lt;/p&gt;" type="string" variable="$prefix">
            <type>string</type>
          </tag>
          <tag name="return" line="107" description="the filtered array" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="107" description="if $array or $prefix is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="107" description="if $array is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="107" description="if $prefix is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$prefix</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="172" package="Default">
        <name>inArray</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::inArray()</full_name>
        <docblock line="172">
          <description>Wildcard search for a value in an array</description>
          <long-description>I'll search $haystack for $needle. Unlike PHP's native in_array() method,
I'll accept begins-with (e.g., "foo*"), ends-with (e.g., "*foo"), and
contains (e.g., "*foo*") wildcard notation.

For example:

    Arr::inArray('foo', ['foo', 'bar']);  // returns true
    Arr::inArray('qux', ['foo', 'bar']);  // returns false
    Arr::inArray('fo*', ['foo', 'bar']);  // returns true
    Arr::inArray('*oo', ['foo', 'bar']);  // returns true
    Arr::inArray('*o*', ['foo', 'bar']);  // returns true</long-description>
          <tag name="since" line="172" description="0.1.0"/>
          <tag name="param" line="172" description="&lt;p&gt;the needle to find&lt;/p&gt;" type="string" variable="$needle">
            <type>string</type>
          </tag>
          <tag name="param" line="172" description="&lt;p&gt;the haystack to search&lt;/p&gt;" type="array&lt;mixed,string&gt;" variable="$haystack">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="param" line="172" description="&lt;p&gt;the wildcard character (optional; if omitted,&#10;defaults to '*')&lt;/p&gt;" type="string" variable="$wildcard">
            <type>string</type>
          </tag>
          <tag name="return" line="172" description="true if the needle exists in haystack" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="172" description="if $needle, $haystack, or $wildcard is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="172" description="if $needle is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="172" description="if $haystack is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="172" description="if $wildcard is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$needle</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$haystack</name>
          <default></default>
          <type>array&lt;mixed,string&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$wildcard</name>
          <default>'*'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="254" package="Default">
        <name>isAssoc</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::isAssoc()</full_name>
        <docblock line="254">
          <description>Returns true if the array has at least one string key (excluding int strings)</description>
          <long-description>PHP natively treats all arrays as associative arrays. I'll consider an
associative array as an array with a string key. Interally, PHP casts
string keys containing valid integers to integer type (e.g., "8" will be
stored as 8).

For example:

    Arr::isAssoc([1, 2, 3]);                       // returns false
    Arr::isAssoc(['foo', 'bar', 'baz']);           // returns false
    Arr::isAssoc(['1' =&gt; 'foo', 2 =&gt; 'bar']);      // returns false (PHP casts '1' to 1)
    Arr::isAssoc(['1' =&gt; 'foo', 8 =&gt; 'bar']);      // returns false (sparse doens't matter)
    Arr::isAssoc(['1' =&gt; 'foo', 'bar' =&gt; 'baz']);  // returns true</long-description>
          <tag name="since" line="254" description="0.1.0"/>
          <tag name="param" line="254" description="&lt;p&gt;the array to test&lt;/p&gt;" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="254" description="true if the array has a string key (excluding int strings)" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="318" package="Default">
        <name>isEmpty</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::isEmpty()</full_name>
        <docblock line="318">
          <description>Returns true if $key does not exist in $array or $array[$key] is empty</description>
          <long-description>PHP's isset() method is will return false if the key does not exist or if the
key exists and its value is null. However, it will return true if the key
exists and its value is not null (including other "empty" values like '', false
and array()).

PHP's empty() method (or some frameworks) will throw a warning if you attempt
to test a non-existant key in an array.

I, on the other hand, will return false if the key does not exist in the array
or if the key's value is empty.

For example:

    $a = ['foo' =&gt; null, 'bar' =&gt; array(), 'qux' =&gt; 'hello'];

    // when key doesn't exist (!)
    isset($a['quux']);           // returns false
    ! empty($a['quux']);         // throws key-does-not-exist warning
    ! Arr::isEmpty('quux', $a);  // returns false

    // when key does exist, but value is null
    isset($a['foo']);           // returns false
    ! empty($a['foo']);         // returns false
    ! Arr::isEmpty('foo', $a);  // returns false

    // when key does exist, but value is "empty" (!)
    isset($a['bar']);           // returns true
    ! empty($a['bar']);         // returns false
    ! Arr::isEmpty('bar', $a);  // returns false

    // when key does exist, but value is not "empty"
    isset($a['qux']);           // returns true
    ! empty($a['qux']);         // returns true
    ! Arr::isEmpty('qux', $a);  // returns true</long-description>
          <tag name="since" line="318" description="0.1.0"/>
          <tag name="param" line="318" description="&lt;p&gt;the key's name&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="318" description="&lt;p&gt;the array to test&lt;/p&gt;" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="param" line="318" description="&lt;p&gt;a flag indicating whether or not zero is&#10;considered empty (optional; if omitted, defaults to true - i.e., the&#10;default behavior of PHP's empty() function )&lt;/p&gt;" type="boolean" variable="$isZeroEmpty">
            <type>boolean</type>
          </tag>
          <tag name="return" line="318" description="true if the key exists and its value is not empty" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="318" description="if $key or $array are null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="318" description="if $key is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="318" description="if $array is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="318" description="if $isZeroEmpty is not a bool value" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$isZeroEmpty</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="389" package="Default">
        <name>keyStringReplace</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::keyStringReplace()</full_name>
        <docblock line="389">
          <description>Replaces all occurences of $search with $replace in $array's keys</description>
          <long-description>I'll return an array with all occurences of $search in the array's keys
replaced with the given $replace value (case-insensitive).</long-description>
          <tag name="since" line="389" description="0.1.0"/>
          <tag name="param" line="389" description="&lt;p&gt;the value being searched for (aka the needle); an&#10;array may be used to designate multiple neeeles&lt;/p&gt;" type="mixed" variable="$search">
            <type>mixed</type>
          </tag>
          <tag name="param" line="389" description="&lt;p&gt;the replacement value that replaced found $search&#10;values; an array may be used to designate multiple replacements&lt;/p&gt;" type="mixed" variable="$replace">
            <type>mixed</type>
          </tag>
          <tag name="param" line="389" description="&lt;p&gt;the array to replace&lt;/p&gt;" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="389" description="the array with replacements" type="array">
            <type>array</type>
          </tag>
          <tag name="throws" line="389" description="if $search, $replace, or $array are null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="389" description="if $search is not a string or array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="389" description="if $replace is not a string or array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="389" description="if $array is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="389" description="str_replace() man page" link="http://us1.php.net/str_replace"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$search</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$replace</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="464" package="Default">
        <name>sortByField</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::sortByField()</full_name>
        <docblock line="464">
          <description>Sorts an array of associative arrays by a field's value</description>
          <long-description>Oftentimes, you have a 0-indexed array of associative arrays. For example,
a SELECT sql query result or a display-friendly data array. I'll sort a
0-based array of associative arrays by a field's value.

For example:

    $a = [['a' =&gt; 3], ['a' =&gt; 1], ['a' =&gt; 2]];
    Arr::usort_field($a, 'a'); // returns [['a' =&gt; 1], ['a' =&gt; 2], ['a' =&gt; 3]]</long-description>
          <tag name="since" line="464" description="0.1.0"/>
          <tag name="param" line="464" description="&lt;p&gt;the array of associative arrays to sort&lt;/p&gt;" type="array&lt;mixed,array&gt;" variable="$array">
            <type>array&lt;mixed,array&gt;</type>
          </tag>
          <tag name="param" line="464" description="&lt;p&gt;the associative array's field name (aka, key)&lt;/p&gt;" type="string" variable="$field">
            <type>string</type>
          </tag>
          <tag name="param" line="464" description="&lt;p&gt;the sort order (possible values 'asc[ending]' or&#10;'desc[ending]) (optional; if omitted, defaults to 'asc') (case-insensitive)&lt;/p&gt;" type="string" variable="$sort">
            <type>string</type>
          </tag>
          <tag name="return" line="464" description="the sorted array" type="array&lt;mixed,array&gt;">
            <type>array&lt;mixed,array&gt;</type>
          </tag>
          <tag name="throws" line="464" description="if $array, $field, or $sort is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="464" description="if $array is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="464" description="if $field is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="464" description="if $sort is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="464" description="if $sort is not the string 'asc[ending]' or&#10;   'desc[ending]'" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="464" description="if $array is not an array of arrays with&#10;   the key $field" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array&lt;mixed,array&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$field</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sort</name>
          <default>'asc'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="554" package="Default">
        <name>sortByProperty</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::sortByProperty()</full_name>
        <docblock line="554">
          <description>Sorts an array of objects using a public property's value</description>
          <long-description></long-description>
          <tag name="since" line="554" description="0.1.0"/>
          <tag name="param" line="554" description="&lt;p&gt;the array of objects to sort&lt;/p&gt;" type="array&lt;mixed,object&gt;" variable="$array">
            <type>array&lt;mixed,object&gt;</type>
          </tag>
          <tag name="param" line="554" description="&lt;p&gt;the object's public property name (may be a magic&#10;public property via the object's __get() method)&lt;/p&gt;" type="string" variable="$property">
            <type>string</type>
          </tag>
          <tag name="param" line="554" description="&lt;p&gt;the sort order (possible values 'asc[ending]' or&#10;'desc[ending]) (optional; if omitted, defaults to 'asc') (case-insensitive)&lt;/p&gt;" type="string" variable="$sort">
            <type>string</type>
          </tag>
          <tag name="return" line="554" description="the sorted array" type="array&lt;mixed,object&gt;">
            <type>array&lt;mixed,object&gt;</type>
          </tag>
          <tag name="throws" line="554" description="if $array, $property, or $sort is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="554" description="if $array is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="554" description="if $property is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="554" description="if $sort is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="554" description="if $sort is not the string 'asc[ending]' or&#10;   'desc[ending]'" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="554" description="if $array is not an array of objects with&#10;   the public property $property" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array&lt;mixed,object&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$property</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sort</name>
          <default>'asc'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="648" package="Default">
        <name>sortByMethod</name>
        <full_name>\Jstewmc\PhpHelpers\Arr::sortByMethod()</full_name>
        <docblock line="648">
          <description>Sorts an array of objects using a method's return value</description>
          <long-description></long-description>
          <tag name="since" line="648" description="0.1.0"/>
          <tag name="param" line="648" description="&lt;p&gt;the array of objects to sort&lt;/p&gt;" type="array&lt;mixed,object&gt;" variable="$array">
            <type>array&lt;mixed,object&gt;</type>
          </tag>
          <tag name="param" line="648" description="&lt;p&gt;the name of the public method to use (may be a&#10;&quot;magic&quot; method via the object's __call() magic method)&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="648" description="&lt;p&gt;the sort order (possible values 'asc[ending]' or&#10;'desc[ending]) (optional; if omitted, defaults to 'asc') (case-insensitive)&lt;/p&gt;" type="string" variable="$sort">
            <type>string</type>
          </tag>
          <tag name="return" line="648" description="the sorted array" type="array&lt;mixed,object&gt;">
            <type>array&lt;mixed,object&gt;</type>
          </tag>
          <tag name="throws" line="648" description="if $array, $property, or $sort is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="648" description="if $array is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="648" description="if $property is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="648" description="if $sort is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="648" description="if $sort is not the string 'asc[ending]' or&#10;    'desc[ending]'" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="648" description="if $array is not an array of objects with&#10;    the public property $property" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array&lt;mixed,object&gt;</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$sort</name>
          <default>'asc'</default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="Str.php" generated-path="Str.html" hash="be95e4b44c2bba9d9974f7a889226ad4" package="Default">
    <docblock line="0">
      <description>The file for the Str class</description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
      <tag name="author" line="0" description="Jack Clayton" link="mailto:clayjs0@gmail.com"/>
      <tag name="copyright" line="0" description="2014 Jack Clayton"/>
      <tag name="license" line="0" description="MIT License &lt;http://opensource.org/licenses/MIT&gt;"/>
    </docblock>
    <class final="false" abstract="false" namespace="Jstewmc\PhpHelpers" line="17" package="Default">
      <extends/>
      <name>Str</name>
      <full_name>\Jstewmc\PhpHelpers\Str</full_name>
      <docblock line="17">
        <description>The string (aka, "str") class</description>
        <long-description></long-description>
        <tag name="since" line="17" description="0.1.0"/>
        <tag name="package" line="17" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="45" package="Default">
        <name>endsWith</name>
        <full_name>\Jstewmc\PhpHelpers\Str::endsWith()</full_name>
        <docblock line="45">
          <description>Returns true if $haystack ends with $needle (case-sensitive)</description>
          <long-description>For example:

    Str::endsWith('foobar', 'bar');  // returns true
    Str::endsWith('foobar', 'baz');  // returns false
    Str::endsWith('foobar', 'BAR');  // returns false
    Str::endsWith('foobar', '');     // returns false
    Str::endsWith('', 'foobar');     // returns false</long-description>
          <tag name="since" line="45" description="0.1.0"/>
          <tag name="param" line="45" description="&lt;p&gt;the string to search&lt;/p&gt;" type="string" variable="$haystack">
            <type>string</type>
          </tag>
          <tag name="param" line="45" description="&lt;p&gt;the substring to search for&lt;/p&gt;" type="string" variable="$needle">
            <type>string</type>
          </tag>
          <tag name="return" line="45" description="true if $haystack ends with $needle" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="45" description="if $haystack or $needle is omitted" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="45" description="if $haystack is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="45" description="if $needle is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="45" description="case-insensitive version" link="\Jstewmc\PhpHelpers\Str::iEndsWith()"/>
          <tag name="see" line="45" description="MrHus' answer to &quot;startsWith()&#10;   and endsWith() functions in PHP&quot; on StackOverflow" link="http://stackoverflow.com/a/834355"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$haystack</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$needle</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="105" package="Default">
        <name>iEndsWith</name>
        <full_name>\Jstewmc\PhpHelpers\Str::iEndsWith()</full_name>
        <docblock line="105">
          <description>Returns true if $haystack ends with $needle (case-insensitive)</description>
          <long-description>Str::endsWith('foobar', 'bar');  // returns true
    Str::endsWith('foobar', 'baz');  // returns false
    Str::endsWith('foobar', 'BAR');  // returns true</long-description>
          <tag name="since" line="105" description="0.1.0"/>
          <tag name="param" line="105" description="&lt;p&gt;str  the string to search&lt;/p&gt;" type="string" variable="$haystack">
            <type>string</type>
          </tag>
          <tag name="param" line="105" description="&lt;p&gt;str  the substring to search for&lt;/p&gt;" type="string" variable="$needle">
            <type>string</type>
          </tag>
          <tag name="return" line="105" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="105" description="if $haystack or $needle is omitted" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="105" description="if $haystack is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="105" description="if $needle is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="105" description="case-sensitive version" link="\Jstewmc\PhpHelpers\Str::iEndsWith()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$haystack</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$needle</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="142" package="Default">
        <name>is_bool</name>
        <full_name>\Jstewmc\PhpHelpers\Str::is_bool()</full_name>
        <docblock line="142">
          <description>Alias for the isBool() method</description>
          <long-description></long-description>
          <tag name="since" line="142" description="0.1.0"/>
          <tag name="see" line="142" description="" link="\Jstewmc\PhpHelpers\Str::isBool()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="169" package="Default">
        <name>isBool</name>
        <full_name>\Jstewmc\PhpHelpers\Str::isBool()</full_name>
        <docblock line="169">
          <description>Returns true if $string is a bool string</description>
          <long-description>I'll return true if $string is a bool string like 'true', 'false', 'yes', 'no',
'on' or 'off'. Keep in mind, I only handle strings. I will return false if you
test an actual bool value (because it's not a string).

    is_bool(true);        // returns true
    Str::is_bool(true);   // returns false

    is_bool('true');      // returns false
    Str::isBool('true');  // returns true

    is_bool('yes');       // returns false
    Str::isBool('yes');   // returns true</long-description>
          <tag name="since" line="169" description="0.1.0"/>
          <tag name="param" line="169" description="&lt;p&gt;the string to test&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="169" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="199" package="Default">
        <name>iStartsWith</name>
        <full_name>\Jstewmc\PhpHelpers\Str::iStartsWith()</full_name>
        <docblock line="199">
          <description>Returns true if $haystack starts with $needle (case-insensitive)</description>
          <long-description>For example:

    Str::iStartsWith('foobar', 'bar');  // returns false
    Str::iStartsWith('foobar', 'foo');  // returns true
    Str::iStartsWith('foobar', 'FOO');  // returns true
    Str::iStartsWith('', 'foobar');     // returns false
    Str::iStartsWith('foobar', '');     // returns false</long-description>
          <tag name="since" line="199" description="0.1.0"/>
          <tag name="param" line="199" description="&lt;p&gt;the case-insensitive string to search&lt;/p&gt;" type="string" variable="$haystack">
            <type>string</type>
          </tag>
          <tag name="param" line="199" description="&lt;p&gt;the case-insensitive substring to search for&lt;/p&gt;" type="string" variable="$needle">
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="true if $haystack ends with $needle" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="199" description="if $haystack or $needle is omitted" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="199" description="if $haystack is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="199" description="if $needle is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="199" description="case-sensitive version" link="\Jstewmc\PhpHelpers\Str::startsWith()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$haystack</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$needle</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="269" package="Default">
        <name>password</name>
        <full_name>\Jstewmc\PhpHelpers\Str::password()</full_name>
        <docblock line="269">
          <description>Returns a random string of $length that follows the charset $rules</description>
          <long-description>Oftetimes, standards (like PCI) require passwords with one upper-case letter, one
lower-case letter, one number, and one symbol. I can do that.

For example:

    $rules = ['upper' =&gt; 12];
    $a = Str::password(12, $rules);

    $rules = ['lower' =&gt; 6, 'upper' =&gt; 6];
    $b = Str::password(12, $rules);

    $rules = ['lower' =&gt; 4, 'upper' =&gt; 4, 'number' =&gt; 4];
    $c = Str::password(12, $rules);

    echo $a;  // example 'KNVHYUIDGVDS'
    echo $b;  // example 'jNhGFkLekOfV'
    echo $c;  // example 'la9Uh7BH4Bc3'</long-description>
          <tag name="since" line="269" description="0.1.0"/>
          <tag name="param" line="269" description="&lt;p&gt;the length of the password (optional; if omitted,&#10;defaults to 8)&lt;/p&gt;" type="integer" variable="$length">
            <type>integer</type>
          </tag>
          <tag name="param" line="269" description="&lt;p&gt;an array of character counts indexed by charset name&#10;(possible charset names are 'lower', 'upper', 'number', 'alpha', and 'symbol')&#10;(optional; if omitted, defaults to ['lower' =&gt; 1, 'upper' =&gt; 1, 'number' =&gt; 1,&#10;'symbol' =&gt; 1])&lt;/p&gt;" type="array&lt;mixed,integer&gt;" variable="$rules">
            <type>array&lt;mixed,integer&gt;</type>
          </tag>
          <tag name="return" line="269" description="the password" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="269" description="if $rules or $length is omitted" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="269" description="if $rules is not an array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="269" description="if $length is not an integer" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="269" description="if a key in $rules is not a valid charset name" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="269" description="if a value in $rules is not an integer" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="269" description="if the number of required characters (as defined&#10;   in the $rules array) exceeds the $length" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$length</name>
          <default>8</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$rules</name>
          <default>array('lower' =&gt; 1, 'upper' =&gt; 1, 'number' =&gt; 1, 'symbol' =&gt; 1)</default>
          <type>array&lt;mixed,integer&gt;</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="340" package="Default">
        <name>rand</name>
        <full_name>\Jstewmc\PhpHelpers\Str::rand()</full_name>
        <docblock line="340">
          <description>Returns a random string</description>
          <long-description>For example:

    echo Str::rand(8, 'alpha');              // example 'hbdrckso'
    echo Str::rand(8, ['lower', 'number']);  // example 'k987hb54'
    echo Str::rand(8, ['upper', 'symbol']);  // example 'HG!V*X]@'</long-description>
          <tag name="since" line="340" description="0.1.0"/>
          <tag name="param" line="340" description="&lt;p&gt;the length of the string to return&lt;/p&gt;" type="integer" variable="$length">
            <type>integer</type>
          </tag>
          <tag name="param" line="340" description="&lt;p&gt;a string charset name or an array of charset names&#10;(possible values are are 'lower', 'upper', 'alpha' (a combination of 'upper'&#10;and 'lower'), 'number', and 'symbol') (optional; if omitted, defaults to&#10;['alpha', 'number', 'symbol'])&lt;/p&gt;" type="mixed" variable="$charsets">
            <type>mixed</type>
          </tag>
          <tag name="return" line="340" description="a random string" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="340" description="if $length or $charset is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="340" description="if $length is not an integer" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="340" description="if $charsets is not a string or array" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="340" description="if a given $charset is not a valid charset" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$length</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$charsets</name>
          <default>array('alpha', 'number', 'symbol')</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="432" package="Default">
        <name>splitOnFirstAlpha</name>
        <full_name>\Jstewmc\PhpHelpers\Str::splitOnFirstAlpha()</full_name>
        <docblock line="432">
          <description>Splits a string on the first alpha character</description>
          <long-description>I'll return an array with two parts. The first element is the string part before
the first alpha character, and the second part is everything after and including
the first alpha character.

For example:

    Str::splitOnFirstAlpha("123");        // returns ["123"]
    Str::splitOnFirstAlpha("abc");        // returns ["", "abc"]
    Str::splitOnFirstAlpha("123 abc");    // returns ["123", "abc"]
    Str::splitOnFirstAlpha("1 2 3 abc");  // returns ["1 2 3 4", "abc"]</long-description>
          <tag name="since" line="432" description="0.1.0"/>
          <tag name="param" line="432" description="&lt;p&gt;the string to split&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="432" description="an array" type="array&lt;mixed,string&gt;">
            <type>array&lt;mixed,string&gt;</type>
          </tag>
          <tag name="throws" line="432" description="if $string is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="432" description="if $string is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="432" description="FrankieTheKneeMan's answer to &quot;Split&#10;   string on first occurrence of a letter&quot; on StackOverflow (version using Regex&#10;   lookahead)" link="http://stackoverflow.com/a/18990341"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="487" package="Default">
        <name>startsWith</name>
        <full_name>\Jstewmc\PhpHelpers\Str::startsWith()</full_name>
        <docblock line="487">
          <description>Returns true if $haystack starts with $needle (case-sensitive)</description>
          <long-description>For example:

    Str::startsWith('foobar', 'bar');  // returns false
    Str::startsWith('foobar', 'foo');  // returns true
    Str::startsWith('foobar', 'FOO');  // returns false
    Str::startsWith('foobar', '');     // returns false
    Str::startsWith('', 'foobar');     // returns false</long-description>
          <tag name="since" line="487" description="0.1.0"/>
          <tag name="param" line="487" description="&lt;p&gt;the string to search&lt;/p&gt;" type="string" variable="$haystack">
            <type>string</type>
          </tag>
          <tag name="param" line="487" description="&lt;p&gt;the substring to search for&lt;/p&gt;" type="string" variable="$needle">
            <type>string</type>
          </tag>
          <tag name="return" line="487" description="true if $haystack starts with $needle" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="487" description="if $haystack or $needle is omitted" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="487" description="if $haystack is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="487" description="if $needle is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="487" description="case-insensitive version" link="\Jstewmc\PhpHelpers\Str::startsWith()"/>
          <tag name="see" line="487" description="MrHus' answer to &quot;startsWith() and&#10;   endsWith() functions in PHP&quot; on StackOverflow" link="http://stackoverflow.com/a/834355"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$haystack</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$needle</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="553" package="Default">
        <name>strtobytes</name>
        <full_name>\Jstewmc\PhpHelpers\Str::strtobytes()</full_name>
        <docblock line="553">
          <description>Converts a php.ini-like byte notation shorthand to a number of bytes</description>
          <long-description>In the php.ini configuration file, byte values are sote in shorthand
notation (e.g., "8M"). PHP's native ini_get() function will return the
exact string stored in php.ini and not its integer equivalent. I will
return the integer equivalent.

For example:

    Str::strtobytes('1K');  // returns 1024
    Str::strtobytes('1M');  // returns 1048576
    Str::strtobytes('1G');  // returns 1073741824</long-description>
          <tag name="since" line="553" description="0.1.0"/>
          <tag name="param" line="553" description="&lt;p&gt;the string to convert&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="553" description="the number of bytes" type="integer|float">
            <type>integer</type>
            <type>float</type>
          </tag>
          <tag name="throws" line="553" description="if $string is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="553" description="if $string is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="553" description="if $string does not end in 'k', 'm', or 'g'" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="553" description="ini_get() man page" link="http://www.php.net/manual/en/function.ini-get.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="616" package="Default">
        <name>strtocamelcase</name>
        <full_name>\Jstewmc\PhpHelpers\Str::strtocamelcase()</full_name>
        <docblock line="616">
          <description>Returns a string in camel case</description>
          <long-description>For example:

    Str::strtocamelcase('Hello world');   // returns "helloWorld"
    Str::strtocamelcase('H3LLO WORLD!');  // returns "helloWorld"
    Str::strtocamelcase('hello_world');   // returns "helloWorld"</long-description>
          <tag name="since" line="616" description="0.1.0"/>
          <tag name="param" line="616" description="&lt;p&gt;the string to camel-case&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="616" description="the camel-cased string" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="616" description="if $string is empty" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="616" description="if $string is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="689" package="Default">
        <name>truncate</name>
        <full_name>\Jstewmc\PhpHelpers\Str::truncate()</full_name>
        <docblock line="689">
          <description>Truncates $string to a preferred length</description>
          <long-description>Str::truncate('Lorem ipsum inum', 8);             // returns 'Lorem ipsum...'
    Str::truncate('Lorem ipsum inum', 8, '');         // returns 'Lorem ip...'
    Str::truncate('Lorem ipsum inum', 8, ' ', ' &gt;');  // returns 'Lorem ipsum &gt;'</long-description>
          <tag name="since" line="689" description="0.1.0"/>
          <tag name="param" line="689" description="&lt;p&gt;the string to truncate&lt;/p&gt;" type="string" variable="$str">
            <type>string</type>
          </tag>
          <tag name="param" line="689" description="&lt;p&gt;the string's max length&lt;/p&gt;" type="integer" variable="$limit">
            <type>integer</type>
          </tag>
          <tag name="param" line="689" description="&lt;p&gt;the break character (to truncate at exact length set to&#10;empty string or null) (if the break character does not exist in the string,&#10;the string will be truncated at limit) (optional; if omitted, defaults to ' ')&lt;/p&gt;" type="string" variable="$break">
            <type>string</type>
          </tag>
          <tag name="param" line="689" description="&lt;p&gt;the padding to add to end of string (optional; if&#10;omitted, defaults to '...')&lt;/p&gt;" type="string" variable="$pad">
            <type>string</type>
          </tag>
          <tag name="return" line="689" description="the truncated string" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="689" description="if $string or $limit is omitted" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="689" description="if $string is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="689" description="if $limit is not an integer (or integer string)" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="689" description="if $break is not a string or null" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="689" description="if $pad is not a string or null" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="689" description="The original function&#10;   from &quot;Best PHP Truncate Function&quot; posted 6/27/12 on &quot;Justin Kelly - various&#10;   ramblings&quot; (edited to find closest break *before* limit and truncate string&#10;   exactly if break does not exist)" link="http://blog.justin.kelly.org.au/php-truncate/"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$limit</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$break</name>
          <default>' '</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$pad</name>
          <default>'...'</default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="Bool.php" generated-path="Bool.html" hash="9d30569dd6fef2cabf8774c0d32ebd32" package="Default">
    <docblock line="0">
      <description>The file for the Bool class</description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
      <tag name="author" line="0" description="Jack Clayton" link="mailto:clayjs0@gmail.com"/>
      <tag name="copyright" line="0" description="2014 Jack Clayton"/>
      <tag name="license" line="0" description="MIT License &lt;http://opensource.org/licenses/MIT&gt;"/>
    </docblock>
    <class final="false" abstract="false" namespace="Jstewmc\PhpHelpers" line="17" package="Default">
      <extends/>
      <name>Bool</name>
      <full_name>\Jstewmc\PhpHelpers\Bool</full_name>
      <docblock line="17">
        <description>The boolean (aka, "bool") class</description>
        <long-description></long-description>
        <tag name="since" line="17" description="0.1.0"/>
        <tag name="package" line="17" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="44" package="Default">
        <name>booltostr</name>
        <full_name>\Jstewmc\PhpHelpers\Bool::booltostr()</full_name>
        <docblock line="44">
          <description>Returns $bool value in the string $format</description>
          <long-description>I'll return a bool value as a true-false, yes-no, or on-off string.

For example:

    Bool::booltostr(true);             // returns (string) 'true'
    Bool::booltostr(true, 'yes-no');   // returns (string) 'true'
    Bool::booltostr(false, 'on-off');  // returns (string) 'off'</long-description>
          <tag name="since" line="44" description="0.1.0"/>
          <tag name="param" line="44" description="&lt;p&gt;the boolean value to convert&lt;/p&gt;" type="boolean" variable="$bool">
            <type>boolean</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;the string format to convert to (possible values are&#10;'t[/-]f', true[/-]false', 'y[/-]n', 'yes[/-]no', 'o[/-o]', and 'on[/-]off')&#10;(case-insensitive) (optional; if omitted, defaults to 'true-false')&lt;/p&gt;" type="string" variable="$format">
            <type>string</type>
          </tag>
          <tag name="return" line="44" description="the string value" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="44" description="if $bool is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="44" description="if $bool is not a (bool) value" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="44" description="if $format is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="44" description="if $format is not a valid format" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$bool</name>
          <default></default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$format</name>
          <default>'true-false'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="158" package="Default">
        <name>val</name>
        <full_name>\Jstewmc\PhpHelpers\Bool::val()</full_name>
        <docblock line="158">
          <description>Returns the boolean value of $var</description>
          <long-description>PHP's native boolval() function is not available before PHP 5.5, and it does not
support the strings 'yes', 'no', 'on', or 'off'.

I follow the following rules:

    Strings
        The strings "yes", "true", "on", or "1" are considered true, and
        the strings "no", "false", "off", or "0" are considered false
        (case-insensitive). Any other non-empty string is true.

    Numbers
        The numbers 0 or 0.0 are considered false. Any other number is
        considered true.

    Array
        An empty array is considered false. Any other array (even an
        associative array with no values) is considered true.

    Object
        Any object is considered true.

For example...

    Bool::val("");              // returns (bool) false
    Bool::val(true);            // returns (bool) true
    Bool::val(0);               // returns (bool) false
    Bool::val(0.0);             // returns (bool) false
    Bool::val('0');             // returns (bool) false
    Bool::val('abc');           // returns (bool) true
    Bool::val('true');          // returns (bool) true
    Bool::val('on');            // returns (bool) true
    Bool::val('yes');           // returns (bool) true
    Bool::val('off');           // returns (bool) false
    Bool::val([]);              // returns (bool) false
    Bool::val([1, 2]);          // returns (bool) true
    Bool::val(new StdClass());  // returns (bool) true</long-description>
          <tag name="since" line="158" description="0.1.0"/>
          <tag name="param" line="158" description="&lt;p&gt;the variable to test&lt;/p&gt;" type="mixed" variable="$var">
            <type>mixed</type>
          </tag>
          <tag name="return" line="158" description="the bool value" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="see" line="158" description="boolval() man page" link="http://www.php.net/manual/en/function.boolval.php"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$var</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
    </class>
    <source>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</source>
  </file>
  <file path="Dir.php" generated-path="Dir.html" hash="4fae562bae94f74a09413785959662d5" package="Default">
    <docblock line="0">
      <description>The file for the directory (aka, "dir") class</description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
      <tag name="author" line="0" description="Jack Clayton" link="mailto:clayjs0@gmail.com"/>
      <tag name="copyright" line="0" description="2014 Jack Clayton"/>
      <tag name="license" line="0" description="MIT License &lt;http://opensource.org/licenses/MIT&gt;"/>
    </docblock>
    <class final="false" abstract="false" namespace="Jstewmc\PhpHelpers" line="17" package="Default">
      <extends/>
      <name>Dir</name>
      <full_name>\Jstewmc\PhpHelpers\Dir</full_name>
      <docblock line="17">
        <description>The directory (aka, "dir") class</description>
        <long-description></long-description>
        <tag name="since" line="17" description="0.1.0"/>
        <tag name="package" line="17" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="33" package="Default">
        <name>abs2rel</name>
        <full_name>\Jstewmc\PhpHelpers\Dir::abs2rel()</full_name>
        <docblock line="33">
          <description>Returns a relative path (aka, "rel") from an absolute path (aka, "abs")</description>
          <long-description></long-description>
          <tag name="since" line="33" description="0.1.0"/>
          <tag name="param" line="33" description="&lt;p&gt;the abosolute path (e.g., 'C:\path\to\folder')&lt;/p&gt;" type="string" variable="$absolute">
            <type>string</type>
          </tag>
          <tag name="param" line="33" description="&lt;p&gt;the relative base (e.g., 'C:\path\to')&lt;/p&gt;" type="string" variable="$base">
            <type>string</type>
          </tag>
          <tag name="return" line="33" description="the relative path (e.g., 'folder') or false on failure" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="33" description="if $absolute or $base is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="33" description="if $absolute is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="33" description="if $base is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$absolute</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$base</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="115" package="Default">
        <name>copy</name>
        <full_name>\Jstewmc\PhpHelpers\Dir::copy()</full_name>
        <docblock line="115">
          <description>Copies files or directory to the filesystem</description>
          <long-description>PHP's native copy() function only copies files, not directories. I will
recursively copy a directory and all of its files and sub-directories.

If the $destination exists, I will overwrite any existing files with the
corresponding file in the $source directory.

If $destination does not exist, and $mode is set to false I will throw an
InvalidArgumentException. If $mode is an integer (or omitted), I attempt
to create the destination directory. I will recursively create destination
directories as needed.

To copy a file, use PHP's native copy() method.</long-description>
          <tag name="since" line="115" description="0.1.0"/>
          <tag name="param" line="115" description="&lt;p&gt;the source directory path&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="115" description="&lt;p&gt;the destination directory path&lt;/p&gt;" type="string" variable="$destination">
            <type>string</type>
          </tag>
          <tag name="param" line="115" description="&lt;p&gt;the mode of the destination directory as an&#10;octal number with a leading zero (ignored on Windows) (optional; if&#10;omitted, defaults to 0777, the widest possible access) (set to false to&#10;throw an exception if the destination directory does not exist)&lt;/p&gt;" type="integer" variable="$mode">
            <type>integer</type>
          </tag>
          <tag name="return" line="115" description="true if successful" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="115" description="if $source, $destination, or $mode is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="115" description="if $source is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="115" description="if $destination is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="115" description="if $mode is not an integer or false" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="115" description="if $source does not exist or is not a directory" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="115" description="if $source is not readable" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="115" description="if $destination does not exist or it could not&#10;   be created successfully" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="115" description="if $destination is not writeable" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="115" description="Felix King's answer to &quot;Copy entire&#10;   contents of a directory to another using php&quot; on StackOverflow" link="http://stackoverflow.com/a/2050909"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$destination</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>511</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Jstewmc\PhpHelpers" line="229" package="Default">
        <name>cp</name>
        <full_name>\Jstewmc\PhpHelpers\Dir::cp()</full_name>
        <docblock line="229">
          <description>Alias for Dir::copy() method</description>
          <long-description></long-description>
          <tag name="since" line="229" description="0.1.0"/>
          <tag name="see" line="229" description="" link="\Jstewmc\PhpHelpers\Dir::copy()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$destination</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>511</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="Jstewmc\PhpHelpers" line="260" package="Default">
        <name>remove</name>
        <full_name>\Jstewmc\PhpHelpers\Dir::remove()</full_name>
        <docblock line="260">
          <description>Deletes a non-empty directory and its sub-directories</description>
          <long-description>PHP's native rmdir() function requires the directory to be empty. I'll
recursively delete a directory's files and sub-directories. BE CAREFUL!
Use the $container argument to be safe.</long-description>
          <tag name="since" line="260" description="0.1.0"/>
          <tag name="param" line="260" description="&lt;p&gt;the path of the directory to remove&lt;/p&gt;" type="string" variable="$directory">
            <type>string</type>
          </tag>
          <tag name="param" line="260" description="&lt;p&gt;an ancestor directory of $directory&lt;/p&gt;" type="string" variable="$container">
            <type>string</type>
          </tag>
          <tag name="return" line="260" description="true if success" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="throws" line="260" description="if $directory or $container is null" type="\BadMethodCallException">
            <type>\BadMethodCallException</type>
          </tag>
          <tag name="throws" line="260" description="if $directory is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="260" description="if $container is not a string" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="260" description="if $directory is not a valid directory path" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="260" description="if $directory is not writeable" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="throws" line="260" description="if $directory is not contained in $container" type="\InvalidArgumentException">
            <type>\InvalidArgumentException</type>
          </tag>
          <tag name="see" line="260" description="donald123's answer to &quot;Remove all&#10;   files, folders, and their subfolders with php&quot; on StackOverflow" link="http://stackoverflow.com/a/11614201"/>
          <tag name="see" line="260" description="rmdir() man page" link="http://us1.php.net/rmdir"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$directory</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$container</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="Jstewmc\PhpHelpers" line="353" package="Default">
        <name>rm</name>
        <full_name>\Jstewmc\PhpHelpers\Dir::rm()</full_name>
        <docblock line="353">
          <description>Alias for Dir::remove() method</description>
          <long-description></long-description>
          <tag name="since" line="353" description="0.1.0"/>
          <tag name="see" line="353" description="" link="\Jstewmc\PhpHelpers\Dir::remove()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$directory</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$container</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <source>eJzNWmtvGzcW/WwD+g+MEFRWoEp2trtB43i3qeMi7jZI4KQoFjBg0DOUxHo01HI4UbRb//e9l48ZcoYaS0qbrtEm0Yg8PPfBy8szfvGP5XzZO5w8edI7JE/IhzkjU57BH0ISBR9SLlmihFyTI3pHR6QPD/pDkmS0KHCGnvUdLdUcJuDPjzS5I+cZXSuRkxcwbv1rcfzdbEF5Nk7E4u9mQiKWa8lnc0XI0+OTb4JZZkTGE5YXDCHfXH4gP9mPL+ZKLZ9PJmIJH0UpEzYWcjaxo4sJjNVLTHqHvcOcLlixpAkjPxaKrRbJ9bv58jXLlkwWpzjAN3s7SwueAxw5Hp+Mj+06egR5xWXv8L+9wwONeQBjr5gqZV4QSiTLqOIfGVlSNXfw8BDgp1IsCM0JvS1EVqpwCDzsDzWYQXSru+XrL5ZU0gV8USjJ8xkhjys8HUV6KwJ4Np6NR2Rw/vwaP18rcT0VWcrkYLgJ75aaWBi8yiD9uA03CFhL7YgaLEAICDkWBJJpSjPAhiSaQuqUkvmIai7FqiDk+nuavmGQe+k5zbKLTwlbKg5T4IdPPScAnLGAFyQvs6wJc5l/pBlPX8pZuWC58oACGJwtFATUWLIbSrV+EwFS6GBZ3kIKw1NwSkKmZZ7oibDyU/DUUUVhZHDQvZhrB4/hW3JmfHWKD/D/ySSkTfPULk8lIzPweo7DYEwNTB6dnWnXkK++soPdkyHRS7VgeeHbYfB4cWOe1MhDN98BOEcEk5uztZXVTJwq2UJAvigJ6YBpVMC2m7NCW8c+LTORsnAX2ak14TMiAX3he/PV5dXF+Ye3V/+6eX/x7uXVS/jn8DQy0S5wFBk/ql1ip+7GWbvD56sfVFzx0wM87YRujtqhTX4zpmyVn06ZZFhcbplaMZbrx2ol3Bo4AtagUtL1DX5o5+SpA67x+cLYyBVZU+mwTM7a7zbQxSUA0WLdE4bFwGWD3nEkZ6vNe+7IDj24uXlz8eH121c3N+P+0RCdBFW+ILrAMcUkGjmqgzAiSoAPquTsWxzn7Xv9V8hnBzoPshE5+DNI4w2MLCHNJ6DjsYlXR8tlAxVwhyvUFavieeN8wvytXGYIGT73eKoeHNiKj5HGx+ZpdTCeiyWHTYB9RoGluT55wVJlO5BiDUf2wiv6716/G0D1NKcG9g9AuiqUIs/W+LDCHek665Dh8ZhckhV3pR8el7IAJDNtDd6tWaB14DAippC4jic+LMrbr31Ij93lVDN/nLJCcSQJpNgnXihgYhYmUAnkSnJdkNfmS/SygV9xcCsiGLhESAmti8hTN4Rwsycfm66npttgETBIBTMHjl5tZE6Chd6RBSlw8wt7zlqOJnmgH7F4G9J5rFdyQDCc54rNIH2PIJxiwZVi6RANp/CvxVIZNFgskYyCA3TN8XlWxjgiQYDMJG+CwfNCQSjYyVjKUt8dH4QLLnpwREowNJZGC71J/JmNPq/VaFV9kY1G3Ro1w+NKe2yy74LNPokggLv1giYExFtePxDTDjSKATNw8CMSRTM45he3ED2dhJRkjOq0+w+TAg7lWS4kS7ET+4XnKbQ6QwizTgOaneKJXoOZyI9g5SktM6wmghw/e/ZspPmsODIiS1EU/BYymiYJKxAtyEQlKrwqG1nVSvEu08J0j/agt0JkACxLhlBFqSlMy2yP7tJEehSEcaRbTbcxdm81bfZ8VqPp++azgCozEKHe464338uyMESIVVGs4vg5LoNSkVJIrv1dFmGooFCUWYpPq9yEE9nUpdTLomxH7pFQ6ROissBVIwa73N584Y6Q3OFZMs3ECq/UEzp5evzX42+PvyXkB5bxT+SfEOoBbvNihQ2OIP1zLIOwPri43q6JgIjmsEuhXtDwFKZAZQ5zy0I3AvNlH/f/e1z6rV36obuLrq0bNolJrTNdG+q7DC/eG096NxrvPmMDrc8w33HtS40dGVxp/BnBF5rKhrtOnVtdNx0zqnXPaQS387rjjQ1vPTx+znp70EOz3x7pGUPy22/O0WfWoTW0xY6eWKZv0Y7WvP2N6S8Hz9vGd0MDnrdDAzT3PArpYW5T+jX3FRtAZog7r+/gqkbEZckj3RncGIvDMGBytHwacDpY3GkXtFN7pE+Y6oZW3Ru2MuVB94cBiKfONgsBOlabIBgVtvumawFcAYW4aKz9cTakr7iErY0z/NQ5bSBmQiz10V/OTEuMdUthk8e3WEkPXuP9GfLJWwbWDldazbGrPnITHkX2iOdFTC29NtySOHRMFaf+uK9D1R+P+8E8XYkqcDIYD3S58Z+MB83FvJiZpt8mQDiovf/GkVv02K7VDNqBlSYaNyCr9jZGBkW5YNn0+XNd2BvDDrbgMWrN8TJrt4m4xxoPw+C2JAPPcn2yrTjKKr+WhaqtR493mf/FDX/IxFjqYLcsJV7DEgzwCE4dsWynD1S+2rZ2gtzC7rnrXC7uX+CA3oVen+pyPMf2AeqvEcJaY7Hx91yM13/dmUP3gOpC+AIC9gLeJdcxq7ka2PKPI0Y+qL5OQrfmrt/Q8mAvg9g5+6RgKpPuUhnghp+DTECWoXfumzWDph8pXiGtpKGXaiXY9tUqwAf4JBPWQV3VUI/qgI0FcRdxTf9sp7AFh6RTtNwhU7MPamjI1TtM27R3Zb0/6byWburc7I8Dl/SPzLUhAjuXDAqPbRIcom0yhr718e6hbfqOlm+nQLq23QXKNWfRQHlMK6ItnrvR3ItlLDI1zZqlI9nkuBPFhxOoK9JVA1/xq+jdk96X0byjO/JPVL2bOffF5G5hgxUI3o5N4CVs9DCgHZJ3dUxY4RvfYEyePLG37pcZh4MRX65DKbatlNMfe1vIj1oIuG6/zb724JoX8/pGvtzpPm4tsk1f99xhaK1h+4pl4EzsYHORf61P5obKjvJ6Q1T3rA2kWrnAc8yT/CX7dwnTikaXYLJHLzYmlwM4+3stxT/VxPyr1aBL5iffX5Dzl1cXP/z80yMD9rM9ex+jhEJ5DilMbfJbAgWdsr0E5doSvYJ+3eL0XN/IqqOKgdS09O8WwMrQBfovWsTUW6m3rU7a210k9ZaUPq+91NGgF9xf1wxZ7K+zttno4XHlfl/QUA/cH8cZnWJ3XbugVVw6VMaTk7+dfPP0+ISQFLX/9OTpX0KV8cq87qYurvBjX8aZX+woTAWFXOYSd5l9at47bBYZQ2ZlcTKGseOcqYkuCqSqDQtI9iWdedJphz5pNtBR7amR55YuUZIEqmRY0IKC0JQl66GBAFlP2aBCBrHsEiKrgS0tMkj5TiWydgFg6NO754uR5iVnbbOreg2hIhCo2qzipjXFqLYSFUOKE+OVWhTkeg0cO0TfKzhEIU+kKn6BlNyUG01hspLAIncwhPA1r9qE0wADG2wrQshCkeb9P3JRTMO7XEw4gyGwQZ1UVY/dTvqq/WrH2Uriy2DJnMqNGtg+ClhsURqcyMEFN5pnO4lh+i7NqNQG2MZAW7hpyZgkZmtJQzHYitCINGa10xV/GmpATHxx0hZfobTVdCEW4lNnoK+DNy0q84znd9u6s1Ok2EaOelCMaktR/jIxT2wvQkUkqN30p73UJ5qvV7QB43/qlJruwx0ak5la4uHD1SN8PWHEJdwQ7hfY4sWtlpcacIEF5nTeOZ/+eKVD34Kr7aYvnvZTaPD/g9ThnUTbiGdfWuzYxLHREEfUDv3nH6V46ELOIKhpzbUZ8i8ue9SnvMcp4rs/79f9Ro1reuWw30v3sOfl76d8OMCN2odcPNTpB3LH5uHWPPjvf5jlHIs=</source>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="global" full_name="global"/>
  <namespace name="Jstewmc" full_name="Jstewmc">
    <namespace name="PhpHelpers" full_name="Jstewmc\PhpHelpers"/>
  </namespace>
  <deprecated count="0"/>
</project>
